module fetch(
    input CLK,                       
    input Reset,                          
    input [31:0] newAddress, 
    input pcW,          
    output reg[31:0] currentAddress,
    
    input [31:0] IAddr,     
    output [5:0] op,
    output [4:0] rs,
    output [4:0] rt,
    output [4:0] rd,
    output [4:0] shf,
    output [5:0] func,
    output [15:0] immediate,
    output [25:0] targe,

	input [31:0] busA,
	input [25:0] targe,
        input [31:0] Eimm,
	input [15:0]immediate,
	input Branch,
	input Jump, 
	input Zero,
	input [31:0] pc,
	input Bgez,
	input Bgtz,
	input Blez,
	input Bltz,
        input Jal,
        input Jalr,
        input Jr,
	output reg[31:0] npc 	
/*input clk,
		input[1:0] bubble,
		input rst,
		input Zero,
		input Jump,
		input Branch_beq,
		input Branch_bne,
		input Bgez,
		input Bgtz,
		input Blez,
		input Bltz,
		input zBgez,
		input zBgtz,
		input Jalr,
		input Jal,
		input[31:0] pre_PC,
		input[15:0] imm16,
		input[25:0] target,
		input[31:0] bus_rs,

		output[31:0] inst,
		output[31:0] PC*/
		);
		
	//wire[31:0] NPC;
	//pc pc(NPC, clk, bubble, rst, PC);
	PC pc(CLK, Reset,pcW, newAddress, currentAddress);
	//im im(PC[11:2], inst);
	 InstructionMemory im(currentAddress, op, rs, rt, rd,shf,func, immediate,targe);
	//npc npc(PC, pre_PC, target, imm16, bus_rs, Branch_beq, Branch_bne, Bgez, Bgtz, Blez, Bltz, zBgez, zBgtz, Jalr, Jal, Zero, Jump, NPC);
        NPC pc1(busA,targe,Eimm,immediate,Branch,Jump,Jr,Bgez, Bgtz, Blez, Bltz,Jal,Jalr, Zero,currentAddress,newAddress);
endmodule